YUI.add("mojito-client-store",function(Y,NAME){var CACHE,QUEUED={},queue,flushQueue,retrieveFile,isCompiled,trimSlash;if(!YUI._mojito){YUI._mojito={}}if(!YUI._mojito._cache){YUI._mojito._cache={}}if(!YUI._mojito._cache.store){YUI._mojito._cache.store={}}CACHE=YUI._mojito._cache.store;queue=function(url,cb){if(!QUEUED[url]){QUEUED[url]=[]}QUEUED[url].push(cb)};flushQueue=function(url,err,data){var i,q;if(QUEUED[url]){q=QUEUED[url].splice(0,QUEUED[url].length);QUEUED[url]=undefined;for(i=0;i<q.length;i+=1){q[i](err,Y.mojito.util.copy(data))}}};retrieveFile=function(url,cb){var onComplete=function(id,obj){CACHE[url]={};try{CACHE[url]=Y.JSON.parse(obj.responseText)}catch(err){flushQueue(url,err);return}flushQueue(url,null,CACHE[url])};if(CACHE[url]){cb(null,Y.mojito.util.copy(CACHE[url]));return}if(!QUEUED[url]){Y.io(url,{headers:{"x-mojito-header":"tunnel"},on:{complete:onComplete}})}queue(url,cb)};isCompiled=function(ns,specName){return YUI._mojito._cache.compiled&&YUI._mojito._cache.compiled[ns]&&YUI._mojito._cache.compiled[ns].specs&&YUI._mojito._cache.compiled[ns].specs[specName]};trimSlash=function(str){if("/"===str.charAt(str.length-1)){return str.substring(0,str.length-1)}return str};function ClientStore(config){this.appConfig=config.appConfig;this.routes=config.routes;this.staticContext=config.context;this.appConfig.pathToRoot=config.pathToRoot;this.staticPrefix="/static";if(this.appConfig&&this.appConfig.staticHandling&&this.appConfig.staticHandling.hasOwnProperty("prefix")){this.staticPrefix=this.appConfig.staticHandling.prefix?"/"+this.appConfig.staticHandling.prefix:""}if(typeof window!=="undefined"){this.staticPrefix=Y.mojito.util.iOSUrl(this.staticPrefix)+"/"}this.staticPrefix=trimSlash(this.staticPrefix)}ClientStore.prototype={expandInstance:function(instance,ctx,cb){return this.expandInstanceForEnv("client",instance,ctx,cb)},expandInstanceForEnv:function(env,instance,ctx,cb){var base={},source={},my=this;if(!instance.instanceId){instance.instanceId=Y.guid()}if(instance.base){source.name=instance.base;source.func=this._getSpec}else if(instance.type){source.name=instance.type;source.func=this._getType}else{throw new Error('There was no info in the "instance" object')}source.func.call(this,env,source.name,ctx,function(err,data){if(err){cb(err,{});return}base=Y.mojito.util.mergeRecursive(data,instance);if(!my._validateInstance(base)){cb(new Error("Instance was not valid. "+Y.JSON.stringify(base)),{});return}cb(null,base)})},getAppConfig:function(ctx){return this.appConfig},getStaticContext:function(){return this.staticContext},getStaticAppConfig:function(ctx){return this.appConfig},getRoutes:function(ctx){return this.routes},validateContext:function(ctx){return true},_getSpec:function(env,id,context,cb){var parts=id.split(":"),typeName=parts[0],specName=parts[1]||"default",ns=typeName.replace(/\./g,"_"),url;url=this.staticPrefix+"/"+typeName+"/specs/"+specName+".json";url=this._buildUrl(url,context);if(isCompiled(ns,specName)){CACHE[url]=YUI._mojito._cache.compiled[ns].specs[specName];cb(null,CACHE[url]);return}retrieveFile(url,cb)},_getType:function(env,type,context,cb){var url=this.staticPrefix+"/"+type+"/definition.json";url=this._buildUrl(url,context);retrieveFile(url,cb)},_buildUrl:function(url,context){if("/"!==url.charAt(0)){url="/"+url}if(this.appConfig.pathToRoot){url=this.appConfig.pathToRoot+url}if(context){url+="?"+Y.QueryString.stringify(context)}return url},_validateInstance:function(base){if(!base.type){return false}return true}};Y.namespace("mojito").ResourceStore=ClientStore},"0.1.0",{requires:["mojito-util","querystring-stringify-simple"]});
